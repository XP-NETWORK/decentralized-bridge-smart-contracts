#import "@ligo/fa/lib/fa2/nft/nft.impl.jsligo" "NFT"

export namespace NFTStorage {
    export type storage = {
        owner: address,
        collection: address,
        locked: set<nat>
    };
    type ret = [list<operation>, storage];
    export type deposit_parameters = { token_id: nat, }
    export type unlock_parameters = { token_id: nat, to: address }
    function transfer_fa2(
        from_: address,
        to_: address,
        token_id: nat,
        store: storage
    ): operation {
        const ctr: contract<NFT.TZIP12.transfer> =
            Tezos.get_entrypoint("%transfer", store.collection);
        const params =
            list(
                [
                    {
                        from_: from_,
                        txs: list(
                            [{ to_: to_, amount: 1n, token_id: token_id }]
                        )
                    }
                ]
            );
        const transfer_nft_op = Tezos.transaction(params, 0mutez, ctr)
        return transfer_nft_op;
    };
    function only_owner(store: storage): unit {
        if (Tezos.get_sender() != store.owner) {
            failwith(
                "Cannot perform this function since you are not the owner."
            )
        }
        return unit;
    };
     @entry
    function add_deposited_token(p: {token_id: nat}, store: storage): ret {
        only_owner(store);
        const new_locked = Set.add(p.token_id, store.locked)
        return [list([]), { ...store, locked: new_locked }]
    };
    @entry
    function unlock_token(p: unlock_parameters, store: storage): ret {
        const current_addr = Tezos.get_self_address();
        only_owner(store);
        const transfer_nft_op =
            transfer_fa2(current_addr, p.to, p.token_id, store);
        const new_locked = Set.remove(p.token_id, store.locked)
        return [list([transfer_nft_op]), { ...store, locked: new_locked }]
    };
    @view
    function get_collection_address(_: unit, store: storage): address {
        return store.collection
    }
   
    @view
    function has_locked_token(token_id: nat, store: storage): bool {
        return Set.mem(token_id, store.locked)
    }
    @view
    function get_owner(_: unit, store: storage): address {
        return store.collection
    }
};
