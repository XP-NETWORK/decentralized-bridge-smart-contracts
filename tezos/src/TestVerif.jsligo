#import "./Bridge.jsligo" "Bridge"

#import "./StorageFactory.jsligo" "StorageFactory"

#import "./CollectionFactory.jsligo" "CollectionFactory"

#import "./NFTv2.jsligo" "NFT"

const bootstrap_validator = "tz1TXgTYPS69ACisXCztjyDps8aqzctFBBrT" as address;

const bootstrap_validato_key =
    "edpkutfTBFn3c4sSD9ef733ZPKEQMJ4MP48Dw45WUeEpcCJojqCEtz" as key;

export type AddrOrStr = ["Addr", address] | ["Str", string];

const deploy_storage_deployer = (): typed_address<
    parameter_of StorageFactory.StorageFactory,
    StorageFactory.StorageFactory.storage
> => {
    let initial_storage: StorageFactory.StorageFactory.storage = {
        owner: None(),
        collection_to_store: Map.empty,
    }
    let { addr, code, size } =
        Test.originate(
            contract_of(StorageFactory.StorageFactory),
            initial_storage,
            0mutez
        );
    return addr;
};

const deploy_collection_deployer = (): typed_address<
    parameter_of CollectionFactory.CollectionFactory,
    CollectionFactory.CollectionFactory.storage
> => {
    let initial_storage: CollectionFactory.CollectionFactory.storage = {
        owner: None(),
        collection_to_store: Map.empty,
    }
    let { addr, code, size } =
        Test.originate(
            contract_of(CollectionFactory.CollectionFactory),
            initial_storage,
            0mutez
        );
    return addr;
};

const deploy_nft_contract = (): typed_address<
    parameter_of NFT.NFT,
    NFT.NFT.Storage
> => {
    let [admin, _b, _a] = Test.get_bootstrap_account(1n);
    let initial_storage: NFT.NFT.Storage = {
        metadata: Big_map.empty,
        assets: Big_map.empty,
        token_metadata: Big_map.empty,
        operators: None(),
        approvals: Big_map.empty,
        proxy: admin,
        extension: { admin: admin }
    }
    let { addr, code, size } =
        Test.originate(contract_of(NFT.NFT), initial_storage, 0mutez);
    return addr;
};

const deploy_bridge_contracts = (cd: address, sd: address): typed_address<
    parameter_of Bridge.Bridge,
    Bridge.Bridge.storage
> => {
    const initial_storage: Bridge.Bridge.storage = {
        validators: Big_map.literal(list([[bootstrap_validator, 0mutez]])),
        unique_identifiers: Big_map.empty,
        collection_deployer: cd,
        storage_deployer: sd,
        original_to_duplicate_mapping: Big_map.empty,
        duplicate_to_original_mapping: Big_map.empty,
        original_storage_mapping_nft: Big_map.empty,
        original_storage_mapping_sft: Big_map.empty,
        duplicate_storage_mapping_nft: Big_map.empty,
        duplicate_storage_mapping_sft: Big_map.empty,
        validators_count: 1n,
        blacklisted_validators: Big_map.empty
    };
    let { addr, code, size } =
        Test.originate(contract_of(Bridge.Bridge), initial_storage, 0mutez);
    return addr;
};

function setup(): typed_address<
    parameter_of Bridge.Bridge,
    Bridge.Bridge.storage
> {
    let storage_deployer = deploy_storage_deployer();
    let collection_deployer = deploy_collection_deployer();
    let bridge =
        deploy_bridge_contracts(
            Test.to_address(collection_deployer),
            Test.to_address(storage_deployer)
        );
    Test.print("Storage Deployer: ");
    Test.println(Test.to_string(storage_deployer));
    Test.print("Collection Deployer: ");
    Test.println(Test.to_string(collection_deployer));
    Test.print("Bridge: ");
    Test.println(Test.to_string(bridge));
    let pc: parameter_of CollectionFactory.CollectionFactory =
        Set_owner({ new_owner: Test.to_address(bridge) });
    let ps: parameter_of StorageFactory.StorageFactory =
        Set_owner({ new_owner: Test.to_address(bridge) });
    let tfc = Test.transfer_exn(collection_deployer, pc, 0mutez);
    let tfs = Test.transfer_exn(storage_deployer, ps, 0mutez);
    assert(
        Test.get_storage(collection_deployer).owner
        == Some(Test.to_address(bridge))
    );
    assert(
        Test.get_storage(storage_deployer).owner
        == Some(Test.to_address(bridge))
    );
    return bridge;
};

function claim_nft() {
    let bridge = setup();
    let cd: parameter_of Bridge.Bridge =
        Claim_nft(
            {
                data: {
                    token_id: 25n,
                    source_chain: "BSC",
                    dest_chain: "TEZOS",
                    dest_address: "tz1hmsQEAzt7F1y7X6xjv1U4pqk4xeKKKPcR" as
                        address,
                    source_nft_contract_address: Str(
                        "0xa702b3873c6818de60d1495b792eefd1e4ebb2a2"
                    ),
                    name: "DUM",
                    symbol: "D",
                    royalty: 0n,
                    royalty_receiver: "tz1NqGupPkw59EHtc6K1YfMqrmgHAjz4qWoB" as
                        address,
                    metadata: "https://ipfs.io/ipfs/QmToNVaaxKDPZnJmBXXCcFXbTyBmVzmKtoRcQBzsfTNbUT",
                    transaction_hash: "0xfc20f11690da4c77dbd9c2ab243c3c66d489ffb3f972646cfe88d237167a36fa",
                    token_amount: 1n,
                    nft_type: "singular",
                    fee: 10000mutez,
                    lock_tx_chain: "BSC",
                },
                sigs: list(
                    [
                        {
                            addr: "tz1TXgTYPS69ACisXCztjyDps8aqzctFBBrT" as
                                address,
                            sig: "sigfzpaCwoVHpS9kVRsXGGGybLZbjHHwgs8XpEQsECmnKutS4VPCaBMx8QKXSHrwgMaG2V4kXs61eUg3nUPK3vJPDNc8yiqs" as
                                signature,
                            signer: "edpkutfTBFn3c4sSD9ef733ZPKEQMJ4MP48Dw45WUeEpcCJojqCEtz" as
                                key
                        }
                    ]
                );
            }
        )
    let tfc = Test.transfer_exn(bridge, cd, 10000mutez);
    const events: list<{ source_chain: string, tx_hash: string, nft_contract: address, token_id: nat, lock_tx_chain: string }> =
        Test.get_last_events_from(bridge, "claimed");
    Test.println(Test.to_string(events));
};

function lock_nft(): unit {
    const nft = deploy_nft_contract();
    const pc: parameter_of NFT.NFT =
        Mint(
                    {
                        token_info: Some(Map.literal([["", Bytes.pack("https://ipfs.io/ipfs/QmToNVaaxKDPZnJmBXXCcFXbTyBmVzmKtoRcQBzsfTNbUT")]])),
                        token_id: 1n,
                        amount: 1n,
                        to_: Test.nth_bootstrap_account(1),
                    }
        );
    const bridge = setup();
    const approve: parameter_of NFT.NFT =
        Update_operators(
            list(
                [
                    AddOperator(
                        {
                            owner: Test.nth_bootstrap_account(1),
                            operator: Test.to_address(bridge),
                            token_id: 1n
                        }
                    )
                ]
            )
        );
    const approve2: parameter_of NFT.NFT =
        Update_operators(
            list(
                [
                    AddOperator(
                        {
                            owner: Test.nth_bootstrap_account(1),
                            operator: Test.to_address(bridge),
                            token_id: 2n
                        }
                    )
                ]
            )
        );
    const tfc = Test.transfer_exn(nft, pc, 0mutez);
    const tfa = Test.transfer_exn(nft, approve, 0mutez);
    const tfa2 = Test.transfer_exn(nft, approve2, 0mutez);
    const pl: parameter_of Bridge.Bridge =
        Lock_nft(
            {
                token_id: 1n,
                dest_chain: "BSC",
                dest_address: "BSC ADDR",
                source_nft_address: Addr(Test.to_address(nft))
            }
        );
    const pl2: parameter_of Bridge.Bridge =
        Lock_nft(
            {
                token_id: 2n,
                dest_chain: "BSC",
                dest_address: "BSC ADDR",
                source_nft_address: Addr(Test.to_address(nft))
            }
        );
    const tfl = Test.transfer_exn(bridge, pl, 0mutez);
    const tfl2 = Test.transfer_exn(bridge, pl2, 0mutez);
    const events: list<
        {
            token_id: nat,
            dest_chain: string,
            dest_address: string,
            source_nft_address: address,
            token_amount: nat,
            nft_type: string,
            source_chain: string
        }
    > =
        Test.get_last_events_from(bridge, "locked");
    Test.println(Test.to_string(events));
}

function add_validator(): unit {
    const bridge = setup();
    let [admin, key, sig] = Test.get_bootstrap_account(1n);
    const add_p: parameter_of Bridge.Bridge =
        Add_validator(
            {
                sigs: list(
                    [
                        {
                            addr: admin,
                            sig: "sigjYbYHRyfbBF5WK8MS8CRE8zxqXhHgA2Fd8CXpqJ3foeHiK7yhzgM1wHMNtgJwJa27GgeGoxo7LcP5Y1dKbwrr821nH9DK" as
                                signature,
                            signer: bootstrap_validato_key
                        },
                    ]
                ),
                validator: "tz1PPSVMDyKjqEPQaJfNfwbU2TKt6ywoU2UP" as address
            }
        );
    const tfc = Test.transfer_exn(bridge, add_p, 0mutez);
    const events: list<{ validator: address }> =
        Test.get_last_events_from(bridge, "added_new_validator");
    assert(List.length(events) > 0n);
    Test.println(Test.to_string(events));
}

const _ = claim_nft();

// const _a = lock_nft();

// const _b = add_validator();
