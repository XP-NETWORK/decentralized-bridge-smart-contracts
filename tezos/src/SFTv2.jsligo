#import "@ligo/fa/lib/fa2/common/assertions.jsligo" "Assertions"
#import "@ligo/fa/lib/fa2/common/errors.mligo" "Errors"
#import "@ligo/fa/lib/fa2/common/tzip12.datatypes.jsligo" "TZIP12"
#import "@ligo/fa/lib/fa2/common/tzip12.interfaces.jsligo" "TZIP12Interface"
#import "@ligo/fa/lib/fa2/common/tzip16.datatypes.jsligo" "TZIP16"
export namespace SFT {
    export type ledger = big_map<[address, nat], nat>;
    export type operator = address;
    export type operators = big_map<[address, operator], set<nat>>;
    export type storage = {
        ledger: ledger,
        operators: operators,
        token_metadata: TZIP12.tokenMetadata,
        metadata: TZIP16.metadata,
        admin: address
    };
    type ret = [list<operation>, storage];
    //operators
    export const assert_authorisation = (
        [operators, from_, token_id]: [operators, address, nat]
    ): unit => {
        const sender_ = (Tezos.get_sender());
        if (sender_ != from_) {
            const authorized =
                match((Big_map.find_opt([from_, sender_], operators))) {
                    when (Some(a)):
                        a
                    when (None()):
                        Set.empty
                };
            if (! (Set.mem(token_id, authorized))) {
                return failwith(Errors.not_operator)
            }
        }
    };
    export const add_operator = (
        [operators, owner, operator, token_id]: [
            operators,
            address,
            operator,
            nat
        ]
    ): operators => {
        if (owner == operator) {
            return operators
        } // assert_authorisation always allow the owner so this case is not relevant
         else {
            Assertions.assert_update_permission(owner);
            let auth_tokens =
                match(Big_map.find_opt([owner, operator], operators)) {
                    when (Some(ts)):
                        ts
                    when (None()):
                        Set.empty
                };
            auth_tokens = Set.add(token_id, auth_tokens);
            return Big_map.update(
                [owner, operator],
                Some(auth_tokens),
                operators
            )
        }
    };
    export const remove_operator = (
        [operators, owner, operator, token_id]: [
            operators,
            address,
            operator,
            nat
        ]
    ): operators => {
        if (owner == operator) {
            return operators
        } // assert_authorisation always allow the owner so this case is not relevant
         else {
            Assertions.assert_update_permission(owner);
            const auth_tokens: option<set<nat>> =
                match(Big_map.find_opt([owner, operator], operators)) {
                    when (Some(toks)):
                        do {
                            const ts = Set.remove(token_id, toks);
                            if (Set.cardinal(ts) == 0n) {
                                return None()
                            } else {
                                return Some(ts)
                            }
                        }
                    when (None()):
                        None()
                };
            return Big_map.update([owner, operator], auth_tokens, operators)
        }
    }
    // ledger 
    export const get_for_user = (
        [ledger, owner, token_id]: [ledger, address, nat]
    ): nat =>
        match((Big_map.find_opt([owner, token_id], ledger))) {
            when (Some(a)):
                a
            when (None()):
                0 as nat
        };
    const set_for_user = (
        [ledger, owner, token_id, amount_]: [ledger, address, nat, nat]
    ): ledger =>
        Big_map.update([owner, token_id], Some(amount_), ledger);
    export const decrease_token_amount_for_user = (
        [ledger, from_, token_id, amount_]: [ledger, address, nat, nat]
    ): ledger => {
        let balance_ = get_for_user([ledger, from_, token_id]);
        assert_with_error((balance_ >= amount_), Errors.ins_balance);
        balance_ = abs(balance_ - amount_);
        return set_for_user([ledger, from_, token_id, balance_])
    };
    export const increase_token_amount_for_user = (
        [ledger, to_, token_id, amount_]: [ledger, address, nat, nat]
    ): ledger => {
        let balance_ = get_for_user([ledger, to_, token_id]);
        balance_ = balance_ + amount_;
        return set_for_user([ledger, to_, token_id, balance_])
    }
    // storage 
    export const set_ledger = ([s, ledger]: [storage, ledger]): storage =>
        ({ ...s, ledger: ledger });
    export const get_operators = (s: storage): operators => s.operators;
    export const set_operators = ([s, operators]: [storage, operators]): storage =>
        ({ ...s, operators: operators })
    @entry
    const transfer = (t: TZIP12.transfer, s: storage): [
        list<operation>,
        storage
    ] => {
        const process_atomic_transfer = (from_: address) =>
            ([l, t]: [ledger, TZIP12.atomic_trans]): ledger => {
                const { to_, token_id, amount } = t;
                Assertions.assert_token_exist(s.token_metadata, token_id);
                assert_authorisation([s.operators, from_, token_id]);
                let ledger =
                    decrease_token_amount_for_user([l, from_, token_id, amount]);
                ledger
                = increase_token_amount_for_user(
                      [ledger, to_, token_id, amount]
                  );
                return ledger
            };
        const process_single_transfer = ([l, t]: [ledger, TZIP12.transfer_from]): ledger => {
            const { from_, txs } = t;
            const ledger =
                List.fold_left(process_atomic_transfer(from_), l, txs);
            return ledger
        };
        const ledger = List.fold_left(process_single_transfer, s.ledger, t);
        return [list([]), set_ledger([s, ledger])]
    };
    @entry
    const balance_of = (b: TZIP12.balance_of, s: storage): [
        list<operation>,
        storage
    ] => {
        const { requests, callback } = b;
        const get_balance_info = (request: TZIP12.request): TZIP12.callback => {
            const { owner, token_id } = request;
            Assertions.assert_token_exist(s.token_metadata, token_id);
            const balance_ = get_for_user([s.ledger, owner, token_id]);
            return ({ request: request, balance: balance_ })
        };
        const callback_param = List.map(get_balance_info, requests);
        const operation =
            Tezos.transaction(Main(callback_param), 0mutez, callback);
        return [list([operation]), s]
    };
    @entry
    const update_operators = (updates: TZIP12.update_operators, s: storage): [
        list<operation>,
        storage
    ] => {
        const update_operator = (
            [operators, update]: [operators, TZIP12.unit_update]
        ): operators =>
            match(update) {
                when (Add_operator(operator)):
                    add_operator(
                        [
                            operators,
                            operator.owner,
                            operator.operator,
                            operator.token_id
                        ]
                    )
                when (Remove_operator(operator)):
                    remove_operator(
                        [
                            operators,
                            operator.owner,
                            operator.operator,
                            operator.token_id
                        ]
                    )
            };
        let operators = get_operators(s);
        operators = List.fold_left(update_operator, operators, updates);
        const store = set_operators([s, operators]);
        return [list([]), store]
    };
    @view
    const get_balance = (p: [address, nat], s: storage): nat => {
        const [owner, token_id] = p;
        Assertions.assert_token_exist(s.token_metadata, token_id);
        return match(Big_map.find_opt([owner, token_id], s.ledger)) {
            when (None()):
                0n
            when (Some(n)):
                n
        }
    };
    @view
    const total_supply = (_token_id: nat, _s: storage): nat =>
        failwith(Errors.not_available);
    @view
    const all_tokens = (_: unit, _s: storage): set<nat> =>
        failwith(Errors.not_available);
    @view
    const is_operator = (op: TZIP12.operator, s: storage): bool => {
        const authorized =
            match(Big_map.find_opt([op.owner, op.operator], s.operators)) {
                when (Some(opSet)):
                    opSet
                when (None()):
                    Set.empty
            };
        return (Set.size(authorized) > 0n || op.owner == op.operator)
    };
    export type mint_args = {
        token_id: nat,
        token_uri: string,
        to: address,
        amt: nat
    }
    @entry
    export const mint = (ma: mint_args, s: storage): ret => {
        assert_with_error(
            Tezos.get_sender() == s.admin,
            "Mint Can Only Be Called By Owner"
        );
        const token_exists =
            Option.is_some(Big_map.find_opt(ma.token_id, s.token_metadata));
        if (! token_exists) {
            let metadata_map =
                Map.literal(list([["", Bytes.pack(ma.token_uri)]]))
            const token_metadata =
                Big_map.add(
                    ma.token_id,
                    { token_id: ma.token_id, token_info: metadata_map },
                    s.token_metadata
                );
            const ledger = Big_map.add([ma.to, ma.token_id], ma.amt, s.ledger);
            const operators =
                Big_map.add([ma.to, ma.to], Set.empty, s.operators);
            return [list([]), { ...s, ledger, operators, token_metadata }]
        } else {
            const ledger =
                increase_token_amount_for_user(
                    [s.ledger, ma.to, ma.token_id, ma.amt]
                );
            return [list([]), { ...s, ledger }]
        }
    }
    @view
    const token_metadata = (p: nat, s: storage): TZIP12.tokenMetadataData => {
        return match(Big_map.find_opt(p, s.token_metadata)) {
            when (Some(data)):
                data
            when (None()):
                failwith(Errors.undefined_token)
        }
    };
};